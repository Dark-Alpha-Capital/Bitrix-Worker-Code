name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: dark-alpha-deal-sourcing
  SERVICE_NAME: bitrix-worker
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build -t us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/bitrix24/bitrix-worker:${{ github.sha }} .
          docker push us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/bitrix24/bitrix-worker:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/bitrix24/bitrix-worker:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --set-env-vars "REDIS_URL=${{ secrets.REDIS_URL }},NODE_ENV=production,DATABASE_URL=${{ secrets.DATABASE_URL }},AI_API_KEY=${{ secrets.AI_API_KEY }}" \
            --timeout=900s \
            --port=8080 \
            --cpu=1 \
            --memory=1Gi \
            --min-instances=0 \
            --max-instances=5 \
            --concurrency=80 \
            --execution-environment=gen2 \
            --cpu-boost \
            --http2 \
            --allow-unauthenticated \
            --set-env-vars "PORT=8080" \
            --update-env-vars "PORT=8080"

      - name: Wait for deployment
        run: |
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format="value(status.conditions[0].status)"

      - name: Health check
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format="value(status.url)")
          echo "Service URL: $SERVICE_URL"

          # Wait for service to be ready
          sleep 30

          # Test health endpoint
          curl -f "$SERVICE_URL/health" || exit 1
          echo "Health check passed!"
